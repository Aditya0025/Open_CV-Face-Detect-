import numpy as np
import cv2
import sys
import numpy as np
import os
from pathlib import Path


cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("Cannot open camera")
    exit()
while True:
    faceCascade  = cv2.CascadeClassifier('Face/data/haarcascades/haarcascade_frontalface_default.xml')
    eyesCascade = cv2.CascadeClassifier('Face/data/haarcascades/haarcascade_eye.xml')
    # Capture frame-by-frame
    ret, frame = cap.read()
    if not ret:
        print("Can't receive frame (stream end?). Exiting ...")
        break
    #fae detection 
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
#     print(gray)
    faces = faceCascade.detectMultiScale(frame,1.3,5)
#     eyes = eyesCascade.detectMultiScale(frame)
    if len(faces) == 0:
        cv2.putText(frame,"MASKED",(10, 30),cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 0, 255), 3)
    else:
        cv2.putText(frame,"UNMASKED",(10, 30),cv2.FONT_HERSHEY_SIMPLEX, 1.0, (0, 0, 255), 3)
    
    output = frame.copy()
    alpha = 0.1 # used to tranparent the frame in copy
    #copy the original and then set frame to copy frame 
    cv2.addWeighted(frame,alpha,output, 1 - alpha,0, output)  
    img= cv2.flip(frame,-1)
    for (x,y,w,h) in faces:
        img = cv2.rectangle(frame,(x,y),(x+w,y+h),(0, 0, 255), -1)
#         need to understand
        roi_gray = frame[y:y+h,x:x+w]
        roi_color = img[y:y+h, x+w]
        eyes = eyesCascade.detectMultiScale(roi_gray)
#         for (ex,ey,ew,eh) in eyes:
#             cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)
        
    
    # if frame is read correctly ret is True
 
    # Our operations on the frame come here
#     gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # Display the resulting frame
    cv2.imshow('frame', output)
    
    if cv2.waitKey(1) == ord('q'):
        break
# When everything done, release the capture
cap.release()
cv2.destroyAllWindows() 
